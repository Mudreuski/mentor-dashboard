{"version":3,"sources":["../app/src/App.js","../app/src/serviceWorker.js","../app/src/index.js"],"names":["taskArr","mentorsDashboard","splice","Table","_ref","selectedOption","getColorTd","keyId","color","react_default","a","createElement","key","style","backgroundColor","taskArrObj","mentorStudents","studentsTasksArr","headArr","map","elem","value","mentorGitName","mentorTh","href","mentorGitLink","target","rel","label","push","students","studentTh","studentName","studentGit","mentorName","i","length","taskTdArr","taskTd","task","taskLink","j","status","studentTasks","includes","className","options","App","state","handleChange","_this","setState","this","react_select_esm","onChange","App_Table","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5610ff34.chunk.js","sourcesContent":["import React from 'react';\nimport Select from 'react-select';\n\nimport './App.css';\nimport mentorsDashboard from \"./mentorsDashboard\";\n\nconst taskArr = mentorsDashboard.splice(0, 1);\n\nconst Table = ({ selectedOption }) => {\n  if (selectedOption !== null) {\n    const taskArrObj = taskArr[0];\n    let mentorStudents = \" \";\n    const studentsTasksArr = [];\n    const headArr = [];\n\n    mentorsDashboard.map(function (elem) {\n      if (selectedOption.value === elem.mentorGitName) {\n        mentorStudents = elem;\n      }\n    });\n\n    const mentorTh =\n      <th key={mentorStudents.mentorGitName}>\n        <a\n          href={mentorStudents.mentorGitLink}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">Mentor: {selectedOption.label}\n        </a>\n      </th>;\n\n    headArr.push(mentorTh);\n\n    mentorStudents.students.map(function (elem) {\n      const studentTh =\n        <th key={elem.studentName}>\n          <a\n            href={elem.studentGit}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">{elem.studentName}\n          </a>\n        </th>;\n\n      headArr.push(studentTh);\n    });\n\n    studentsTasksArr.push(<tr key={mentorStudents.mentorName}>{headArr}</tr>);\n\n    function getColorTd(keyId, color) {\n      return <td key={keyId} style={{ backgroundColor: color }}></td>;\n    }\n\n    for (let i = 0; i < taskArrObj.length; i++) {\n      const taskTdArr = [];\n      const taskTd =\n        <td key={taskArrObj[i].task}>\n          <a\n            href={taskArrObj[i].taskLink}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">{taskArrObj[i].task}\n          </a>\n        </td>;\n\n      taskTdArr.push(taskTd);\n\n      for (let j = 0; j < mentorStudents.students.length; j++) {\n        let taskTd;\n        const key = mentorStudents.students[j].studentName + taskArrObj[i].status;\n\n        if (taskArrObj[i].status === \"In Progress\") taskTd = getColorTd(key, \"gold\");\n\n        if (taskArrObj[i].status === \"Checking\" && !mentorStudents.students[j].studentTasks.includes(taskArrObj[i].task)) {\n          taskTd = getColorTd(key, \"lightcoral\");\n        }\n\n        if (mentorStudents.students[j].studentTasks.includes(taskArrObj[i].task)) {\n          taskTd = getColorTd(key, \"green\");\n        }\n\n        if (taskArrObj[i].status === \"Checked\" && !mentorStudents.students[j].studentTasks.includes(taskArrObj[i].task)) {\n          taskTd = getColorTd(key, \"maroon\");\n        }\n\n        if (taskArrObj[i].status === \"ToDo\") taskTd = getColorTd(key, \"grey\");\n\n        taskTdArr.push(taskTd);\n      }\n\n      studentsTasksArr.push(<tr key={taskArrObj[i].task}>{taskTdArr}</tr>);\n    }\n\n    return <table\n      className=\"tableDashboard\">\n      <tbody key=\"studentsTasks\">{studentsTasksArr}</tbody>\n    </table>;\n  }\n\n  else return null;\n};\n\nconst options = mentorsDashboard.map(function (elem) {\n  const objElem = {\n    value: elem.mentorGitName,\n    label: elem.mentorGitName + ' (' + elem.mentorName + ')',\n  };\n\n  return objElem;\n});\n\nclass App extends React.Component {\n  state = {\n    selectedOption: null,\n  };\n\n  handleChange = (selectedOption) => this.setState({ selectedOption });\n\n  render() {\n    const { selectedOption } = this.state;\n\n    return (\n      <div className=\"mainContainer\">\n        <h1>Enter your name or GH account</h1>\n\n        <Select\n          className=\"select\"\n          value={selectedOption}\n          onChange={this.handleChange}\n          options={options}\n        />\n\n        <Table selectedOption={selectedOption} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}